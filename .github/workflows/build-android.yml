name: Build Android APK (Capacitor)

on:
  push:
    branches: [ main ]
    paths:
      - "src/**/*"
      - "public/**/*"
      - "package.json"
      - "vite.config.js"
      - "capacitor.config.json"
      - ".github/workflows/build-android.yml"
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取代码（保留完整历史，避免依赖解析问题）
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 升级 Node.js 到 20（解决依赖版本兼容问题）
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"  # 关键：从 18 升级到 20，匹配依赖要求
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            api/package-lock.json

      # 3. 清理旧依赖并重新安装（避免缓存导致的版本冲突）
      - name: Install root dependencies (fix compatibility)
        run: |
          npm cache clean --force  # 清理 npm 缓存
          rm -rf node_modules package-lock.json  # 删除旧依赖和锁文件
          npm install  # 重新安装（自动生成适配 Node.js 20 的 lock 文件）
          # 验证 Capacitor CLI 是否可用（确保命令能执行）
          if ! npx cap --version; then
            echo "Error: Capacitor CLI not installed correctly"
            exit 1
          fi

      # 4. 修复 API 子项目依赖（同步 Node.js 20 兼容版本）
      - name: Install API dependencies
        run: |
          cd api
          npm cache clean --force
          rm -rf node_modules package-lock.json
          npm install
          cd ..

      # 5. 构建前端资源（确保 dist 目录生成）
      - name: Build frontend with Vite
        run: |
          npm run build
          if [ ! -d "dist" ]; then
            echo "Error: Vite build failed, dist directory missing"
            exit 1
          fi

      # 6. 配置安卓构建基础环境（JDK + SDK）
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          android-version: 34
          build-tools-version: 34.0.0

      # 7. 初始化 Capacitor 安卓平台（确保命令可执行）
      - name: Set up Capacitor Android
        run: |
          npx cap add android  # 生成安卓项目目录
          npx cap sync android  # 同步前端资源
          if [ ! -d "android" ]; then
            echo "Error: Capacitor Android project not created"
            exit 1
          fi

      # 8. 构建安卓 Debug APK（优化 Gradle 执行参数）
      - name: Build Android Debug APK
        run: |
          cd android
          chmod +x gradlew  # 确保 Gradle 脚本可执行
          ./gradlew assembleDebug --no-daemon --stacktrace  # 增加日志便于排错
          if [ ! -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "Error: Debug APK not generated"
            exit 1
          fi

      # 9. 上传 APK 产物
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: MoeKoe-Music-Android-Debug
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30
