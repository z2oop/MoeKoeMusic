name: Build Android APK (Capacitor)

# 触发条件：main分支推送或手动触发
on:
  push:
    branches: [ main ]
    paths:
      - "src/**/*"
      - "public/**/*"
      - "package.json"
      - "vite.config.js"
      - "capacitor.config.json"
      - ".github/workflows/build-android.yml"
  workflow_dispatch:  # 支持手动触发

jobs:
  build-android:
    runs-on: ubuntu-latest
    environment: production  # 可选：指定环境（如需要审批）

    steps:
      # 1. 拉取代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取完整历史（避免构建时依赖问题）

      # 2. 配置 Node.js 环境
      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"  # 缓存 npm 依赖，加速构建
          cache-dependency-path: |
            package-lock.json
            api/package-lock.json

      # 3. 安装项目依赖（含 Capacitor 工具链）
      - name: Install root dependencies
        run: |
          npm install --frozen-lockfile  # 严格按 lock 文件安装，确保版本一致
          # 验证 Capacitor CLI 是否安装成功
          npx cap --version

      # 4. 安装 API 子项目依赖（如无需可删除）
      - name: Install API dependencies
        run: |
          cd api
          npm install --frozen-lockfile

      # 5. 构建前端资源（Vite 打包）
      - name: Build frontend with Vite
        run: |
          npm run build  # 执行前端打包命令
          # 验证构建产物是否存在
          if [ ! -d "dist" ]; then
            echo "Error: Vite build failed, dist directory not found"
            exit 1
          fi

      # 6. 配置 JDK 环境（安卓构建必需）
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"  # 使用 Eclipse Temurin JDK
          cache: "gradle"  # 缓存 Gradle 依赖

      # 7. 配置 Android SDK（安卓构建必需）
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          # 安装安卓构建工具和平台（根据 capacitor.config.json 中的 targetSdkVersion 调整）
          android-version: 34
          build-tools-version: 34.0.0

      # 8. 初始化 Capacitor 安卓平台并同步资源
      - name: Set up Capacitor Android
        run: |
          # 添加安卓平台（首次构建会生成 android 目录，已存在则忽略）
          npx cap add android
          # 同步前端资源到安卓项目（dist → android/app/src/main/assets/public）
          npx cap sync android
          # 验证安卓项目是否生成
          if [ ! -d "android" ]; then
            echo "Error: Capacitor Android project not created"
            exit 1
          fi

      # 9. 构建安卓 Debug APK（测试用，生产环境需用 Release）
      - name: Build Android Debug APK
        run: |
          cd android
          # 构建 Debug 版本（无需签名，适合测试）
          ./gradlew assembleDebug --no-daemon  # --no-daemon 减少内存占用
          # 验证 APK 是否生成
          if [ ! -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "Error: Debug APK not found"
            exit 1
          fi

      # 10. 上传 APK 产物到工作流
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: MoeKoe-Music-Android-Debug
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30  # 产物保留 30 天

      # （可选）11. 构建 Release 版本（需配置签名，生产环境用）
      # - name: Build Android Release APK
      #   if: startsWith(github.ref, 'refs/tags/')  # 仅在打标签时构建正式版
      #   env:
      #     ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
      #     ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      #     ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      #     ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      #   run: |
      #     # 写入签名文件到安卓项目
      #     echo "$ANDROID_KEYSTORE" | base64 -d > android/app/keystore.jks
      #     cd android
      #     ./gradlew assembleRelease --no-daemon
      #
      # - name: Upload Release APK
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: MoeKoe-Music-Android-Release
      #     path: android/app/build/outputs/apk/release/app-release.apk
